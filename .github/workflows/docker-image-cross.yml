name: Deployment (Cross)

on:
  push:
    branches: ['master']
    # Publish semver tags as releases.
    tags: [ 'v*.*.*' ]

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}


jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Rust toolchain
        uses: dtolnay/rust-toolchain@b44cb146d03e8d870c57ab64b80f04586349ca5d
        with:
          toolchain: stable
          components: rustfmt, clippy

      - uses: Swatinem/rust-cache@v2
        with:
          prefix-key: "tests"
          cache-all-crates: true

      - name: Check cargo fmt
        run: cargo fmt --all -- --check

      - name: Test
        run: cargo test --no-fail-fast --workspace

      - name: Build tests
        uses: ClementTsang/cargo-action@v0.0.5
        with:
          command: test
          args: --no-run --locked
        env:
          RUST_BACKTRACE: full

      - name: Run tests
        uses: ClementTsang/cargo-action@v0.0.6
        with:
          command: test
          args: --no-fail-fast
        env:
          RUST_BACKTRACE: full

      - name: Run clippy
        uses: ClementTsang/cargo-action@v0.0.5
        with:
          command: clippy
          args: --all-targets --workspace -- -D warnings
        env:
          RUST_BACKTRACE: full

  build:
    needs: test
    runs-on: ${{ matrix.info.os }}
    timeout-minutes: 18
    outputs:
      executable: target/${{ matrix.info.target }}/release/spider-bot
    strategy:
      fail-fast: false
      matrix:
        info:
          - {
            os: "ubuntu-latest",
            target: "x86_64-unknown-linux-gnu",
            cross: false,
          }
          - {
            os: "ubuntu-latest",
            target: "aarch64-unknown-linux-gnu",
            cross: true,
          }
    steps:
      - name: Checkout repository
        uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9 # v3.5.3

      - name: Set up Rust toolchain
        uses: dtolnay/rust-toolchain@b44cb146d03e8d870c57ab64b80f04586349ca5d
        with:
          toolchain: stable
          target: ${{ matrix.info.target }}

      - name: Enable Rust cache
        uses: Swatinem/rust-cache@988c164c3d0e93c4dbab36aaf5bbeb77425b2894 # 2.4.0
        if: ${{ github.event_name != 'pull_request' || ! github.event.pull_request.head.repo.fork }} # If it is a PR, only if not a fork
        with:
          key: ${{ matrix.info.target }}
          cache-all-crates: true

      - name: Cargo Build
        uses: ClementTsang/cargo-action@v0.0.5
        with:
          command: build
          args: --all-targets --verbose --target=${{ matrix.info.target }} --locked --release
          use-cross: ${{ matrix.info.cross }}
          cross-version: ${{ matrix.info.cross-version || '0.2.5' }}

  debug:
    needs: build
    runs-on: ubuntu-latest
    steps:
      -  uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
        with:
          name: my-artifact
          path: path/to/artifact
      - name: Display structure of downloaded files
        run: ls -R
        working-directory: path/to/artifact

#  publish:
#    if: ${{ github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main' }}
#    needs: build
#    runs-on: ubuntu-latest
#    permissions:
#      contents: read
#      packages: write
#    concurrency:
#      group: ${{ github.workflow }}-${{ github.ref }}
#      cancel-in-progress: true
#
#    outputs:
#      tag: ${{ fromJSON(steps.meta.outputs.json).tags[0] }}
#
#    steps:
#      - name: Checkout repository
#        uses: actions/checkout@v4
#
#      # Workaround: https://github.com/docker/build-push-action/issues/461
#      - name: Setup Docker buildx
#        uses: docker/setup-buildx-action@f95db51fddba0c2d1ec667646a06c2ce06100226
#
#      # Login against a Docker registry except on PR
#      # https://github.com/docker/login-action
#      - name: Log into registry ${{ env.REGISTRY }}
#        if: github.event_name != 'pull_request'
#        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d
#        with:
#          registry: ${{ env.REGISTRY }}
#          username: ${{ github.actor }}
#          password: ${{ secrets.GITHUB_TOKEN }}
#
#      # Extract metadata (tags, labels) for Docker
#      # https://github.com/docker/metadata-action
#      - name: Extract Docker metadata
#        id: meta
#        uses: docker/metadata-action@96383f45573cb7f253c731d3b3ab81c87ef81934
#        with:
#          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
#          tags: |
#            type=semver,pattern={{version}}
#            type=semver,pattern={{major}}.{{minor}}
#            type=semver,pattern={{major}},enable=${{ !startsWith(github.ref, 'refs/tags/v0.') }}
#            type=sha,priority=650
#            type=ref,event=branch
#          flavor: |
#            latest=auto
#
#      # Build and push Docker image with Buildx (don't push on PR)
#      # https://github.com/docker/build-push-action
#      - name: Build and push Docker image
#        id: build-and-push
#        uses: docker/build-push-action@0565240e2d4ab88bba5387d719585280857ece09
#        with:
#          context: .
#          platforms: linux/amd64,linux/arm64
#          push: ${{ github.event_name != 'pull_request' }}
#          tags: ${{ steps.meta.outputs.tags }}
#          labels: ${{ steps.meta.outputs.labels }}
#
#  deploy:
#    if: ${{ github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main' }}
#    needs: publish
#    runs-on: ubuntu-latest
#    steps:
#      - name: Get Deployment API Token
#        id: token
#        uses: fjogeleit/http-request-action@main
#        with:
#          url: ${{secrets.DEPLOY_AUTH_URL}}
#          method: 'POST'
#          timeout: 30000
#          data: >-
#            {
#              "grant_type":"password",
#              "prompt":"none",
#              "client_id": "kube-environment",
#              "username": "${{secrets.DEPLOY_USERNAME}}",
#              "password": "${{secrets.DEPLOY_PASSWORD}}"
#            }
#          contentType: "application/x-www-form-urlencoded"
#
#      - name: Update
#        id: refresh
#        uses: fjogeleit/http-request-action@main
#        with:
#          url: "${{secrets.DEPLOY_URL}}?image=${{needs.publish.outputs.tag}}"
#          method: 'PATCH'
#          timeout: 30000
#          bearerToken: ${{ fromJson(steps.token.outputs.response).access_token }}
