name: Deployment (Cross)

on:
  push:
    # Publish semver tags as releases.
    tags: [ 'v*.*.*' ]

concurrency:
  group: "${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}"
  cancel-in-progress: true

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: ${{ matrix.info.os }}
    timeout-minutes: 18
    outputs:
      executable: target/${{ matrix.info.target }}/release/spider-bot
    strategy:
      fail-fast: false
      matrix:
        info:
          - {
            os: "ubuntu-latest",
            target: "x86_64-unknown-linux-gnu",
          }
          - {
            os: "ubuntu-latest",
            target: "aarch64-unknown-linux-gnu",
          }
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.2.2

      - name: Set up Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          target: ${{ matrix.info.target }}

      - name: Cargo Build
        uses: ClementTsang/cargo-action@v0.0.6
        with:
          command: build
          args: --all-targets --verbose --target=${{ matrix.info.target }} --locked --release
          use-cross: true
          cross-version: ${{ matrix.info.cross-version || '0.2.5' }}

      - uses: actions/upload-artifact@v4
        with:
          name: artifact ${{ matrix.info.target }}
          path: |
            target/*/release/spider-bot
            target/*/release/spider-bot.exe

  publish:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    outputs:
      tag: ${{ fromJSON(steps.meta.outputs.json).tags[0] }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.2.2

      # Workaround: https://github.com/docker/build-push-action/issues/461
      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@3f1544eb9eff0b4d4d279b33f704a06fcf8d0e43

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@3d100841f68d4548bf57e52eb27bd33ec5069f55
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@418e4b98bf2841bd337d0b24fe63cb36dc8afa55
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}},enable=${{ !startsWith(github.ref, 'refs/tags/v0.') }}
            type=sha,priority=650
            type=ref,event=branch
          flavor: |
            latest=auto

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: target

      - name: Copy output files for Docker
        run: |
          mkdir -p exec/linux
          cp "target/artifact x86_64-unknown-linux-gnu/x86_64-unknown-linux-gnu/release/spider-bot" exec/linux/amd64
          cp "target/artifact aarch64-unknown-linux-gnu/aarch64-unknown-linux-gnu/release/spider-bot" exec/linux/arm64

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83
        with:
          context: .
          push: true
          file: ./CI.Dockerfile
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  deploy:
    needs: publish
    runs-on: ubuntu-latest
    steps:
      - name: Get Deployment API Token
        id: token
        uses: fjogeleit/http-request-action@main
        with:
          url: ${{secrets.DEPLOY_AUTH_URL}}
          method: 'POST'
          timeout: 30000
          data: >-
            {
              "grant_type":"password",
              "prompt":"none",
              "client_id": "${{secrets.DEPLOY_CLIENT_ID}}",
              "scope": "openid kube",
              "username": "${{secrets.DEPLOY_USERNAME}}",
              "password": "${{secrets.DEPLOY_PASSWORD}}"
            }
          contentType: "application/x-www-form-urlencoded"

      - name: Update
        id: refresh
        uses: fjogeleit/http-request-action@main
        with:
          url: "${{secrets.DEPLOY_URL}}?image=${{needs.publish.outputs.tag}}"
          method: 'PATCH'
          timeout: 30000
          bearerToken: ${{ fromJson(steps.token.outputs.response).access_token }}
